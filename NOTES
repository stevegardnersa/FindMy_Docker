https://github.com/biemster/FindMy

1. To rebuild, first stop and delete container - this will clear all config so will need to log in with Apple and re set up all devices
2. docker compose up -d 
3. docker exec -it findmy_server bash -c "cd /app && python setup.py"
4. Apple Login



https://www.youtube.com/watch?v=6OxqiEeCvMI&ab_channel=Docker
https://vitejs.dev/



Setup VM + Docker on GCP

- https://www.youtube.com/watch?v=CSQTnZEoC1o&t=3s
    - make sure http and https traffic is enabled (https://apisero.com/devops-automating-nodepool-auto-upgrade-checks-of-kubernetes-cluster-using-shell-script-2/)

    - https://docs.docker.com/engine/install/debian/#install-using-the-repository
        - see NOTE need to switch to version name eg..
            - https://stackoverflow.com/questions/41133455/docker-repository-does-not-have-a-release-file-on-running-apt-get-update-on-ubun

            echo \
                "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/debian \
                bookworm stable" | \
                sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
    - Get docker to run without sudo
        - https://docs.docker.com/engine/install/linux-postinstall/

    - Setup log rotation (doesn't affect existing containers so maybe do before running container) - https://www.howtogeek.com/devops/how-to-clear-logs-of-running-docker-containers/
        - $ sudo pico /etc/docker/daemon.json
            {
                "log-opts": {
                    "max-size": "8m",
                    "max-file": "5"
                }
            }


Setup git repo
- $ cd /usr/local/src
- $ sudo git clone https://github.com/stevegardnersa/FindMy_Docker.git


Start server
- $ cd /usr/local/src/FindMy_Docker

Edit docker file to run on startup
    - $ sudo pico docker-compose.yml


version: '3'

services:
  findmy:
    build: .
    container_name: findmy_server
    stop_grace_period: 1s
    logging:
        driver: "json-file"
        options:
            max-file: 5
            max-size: 10m
    volumes:
      - ./data:/app/data:Z
      - ./templates:/app/templates
    ports:
      - 3033:3033
  anisette:
    image: dadoum/anisette-v3-server
    container_name: findmy_anisette
    network_mode: 'service:findmy'
    stop_grace_period: 1s
    logging:
    driver: "json-file"
    options:
        max-file: 5
        max-size: 10m
    volumes:
      - anisette-v3_data:/home/Alcoholic/.config/anisette-v3/lib:Z

volumes:
  anisette-v3_data:




- Follow instruction in Git repo Readme
    - $ docker compose up -d
    - $ docker exec -it findmy_server bash -c "cd /app && python setup.py"

    If error could be code error. Commands that might help
    $ docker ps -a (all containers even ones exited)
    $ docker ps (only containers running)
    $ docker logs <container-id> (see logs for specific container)
    $ docker rm <container-id> (remove container)
    $ docker images (show all images)
    $ docker rmi <image-id> (remove image by image id)

- To check status
    - $ docker ps 
    - $ curl localhost:3033



- Enable Docker service so starts on startup
    - $ sudo systemctl enable docker.service
    - $ sudo systemctl enable containerd.service



- Docker logs
    - Use the first comand to check log is large
    - Use truncate command to clear
    
    - Find file with large size 
        - https://askubuntu.com/a/911872
        - https://access.redhat.com/solutions/2334181
    - check size of docker containers
        - $ sudo du -cha --max-depth=1 /var/lib/docker/containers/ | grep -E "M|G"
    - identify which container is the large one and copy name 
        - $ docker ps 
    - truncate large log file - https://www.howtogeek.com/devops/how-to-clear-logs-of-running-docker-containers/
        - $ sudo sh -c 'echo "" > $(docker inspect --format="{{.LogPath}}" findmy_server)'  

Resize disk
1. In the Google Cloud console, go to the Disks page.
2. Go to Disks
3. In the list of persistent disks in your project, click the name of the disk that you want to resize.
4. On the disk details page, click editEdit. You might need to click the more_vert More actions menu and then editEdit.
5. In the Size field, enter the new size for your disk. Disks with MBR partition tables can only resize up to 2 TB.
6. Click Save to apply your changes to the disk.


Install Nginx (https://dev.to/tonyette/how-to-create-a-linux-vm-instance-with-nginx-in-gcp-with-the-cloud-sdk-3j01)
- $ sudo apt-get update
- $ sudo apt install nginx -y

- To check status (https://dev.to/theghostmac/creating-virtual-machines-and-nginx-servers-on-google-cloud-platform-for-go-web-apps-p3b)
    - $ ps auwx | grep nginx

Setup reverse proxy
- https://medium.com/@bpadhy/how-to-setup-an-nginx-reverse-proxy-on-google-cloud-%EF%B8%8F-e9ec749f92c4
    - had to add new config to default as nginx couldn't find rev-proxy.config file

- $ cd /etc/nginx/sites-available
- $ sudo cp default default.old
- $ sudo rm default
- $ sudo pico default

paste following in default file...

    server{
        listen 80;
        server_name revproxy.demo;
        location / {
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            # SET HOST HEADER TO BE THAT OF NGINX SERVER
            proxy_set_header Host $host;
            # PASS ALL REQUESTS MATCHING THE LOCATION TO THE FOLLOWING SERVER
            proxy_pass http://10.128.0.2:3033;
            # HTTP VERSION FOR CONVERTING INCOMING REQUEST
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
        }
    }

Check nginx...
- $ sudo nginx -t

Restart Nginx...
- $ sudo systemctl restart nginx

allow full access through the NGINX firewall...
- $ sudo ufw allow 'Nginx Full'



Setup Dynamic DNS
https://www.dynu.com/
- $ sudo apt-get update
- If canceled previous install then 
    - $ sudo killall apt apt-get
- $ sudo apt-get install ddclient 
    - get parameters from first config file on https://www.dynu.com/DynamicDNS/IPUpdateClient/DDClient
- $ sudo pico /etc/ddclient.conf

daemon=60                                                # Check every 60 seconds.
syslog=yes                                               # Log update msgs to syslog.
mail=root                                                # Mail all msgs to root.
mail-failure=root                                        # Mail failed update msgs to root.
pid=/var/run/ddclient.pid                                # Record PID in file.
use=web, web=checkip.dynu.com/, web-skip='IP Address'    # Get ip from server.
server=api.dynu.com                                      # IP update server.
protocol=dyndns2
login=stevegardner
password='aisXyAq9Xi6M?CRa'
asseteyeapi.webredirect.org

- Check config (change ip on Dynu.com to something random). May need to clear cache (https://unix.stackexchange.com/a/287674)
    - $ sudo ddclient -verbose -foreground
- Run as daemon (https://forums.raspberrypi.com/viewtopic.php?t=29721#p260583)
    - $ sudo systemctl start ddclient.service
    - $ sudo systemctl enable ddclient.service


Setup Cron & Crontab 
https://vitux.com/how-to-setup-a-cron-job-in-debian/#:~:text=A%20Cron%20Job%20in%20Debian%20is%20a%20scheduled%20task%20that,and%20command%20for%20each%20task.
- $ apt-get update
- $ apt-get install cron

Create crons
https://stackoverflow.com/questions/11375260/cron-command-to-run-url-address-every-5-minutes
https://www.warp.dev/terminus/how-to-run-cron-every-hour
https://linuxize.com/post/cron-jobs-every-5-10-15-minutes/
- $ crontab -e
- add cron line to file

# ACME Inc. (demo)
*/15 * * * * wget https://asseteye.app/api/v1/locations/bqZP3ZQWP7IgrbT0z6lM

# GOfuel
5,20,35,50 * * * * wget https://asseteye.app/api/v1/locations/RnGVjAIGQyY05bfV5Bor


- $ sudo service cron reload

List crons
- $ crontab -l

Check Logs to see if cron ran
- $ sudo service cron status

Create GCP Schedule (turn server on and off)
- https://cloud.google.com/compute/docs/instances/schedule-instance-start-stop
- Grant correct permissions if required
    - https://cloud.google.com/compute/docs/instances/schedule-instance-start-stop



Update files
- Make local changes and push to github repo
- Open VM terminal (from GCP console)
- ??? figure out Git ()
    - $ git add .
    - $ git commit -a -m "commit" (do not need commit message either)
    - $ git push

- Rebuild docker
    - $ docker stop $(docker ps -a -q)
    - $ docker rm $(docker ps -a -q)
    - $ docker compose up -d
    - $ docker exec -it findmy_server bash -c "cd /app && python setup.py"


Resize disk
1. In the Google Cloud console, go to the Disks page.
2. Go to Disks
3. In the list of persistent disks in your project, click the name of the disk that you want to resize.
4. On the disk details page, click editEdit. You might need to click the more_vert More actions menu and then editEdit.
5. In the Size field, enter the new size for your disk. Disks with MBR partition tables can only resize up to 2 TB.
6. Click Save to apply your changes to the disk.


Upgrade infrastructure to more cloud native option (Cloud Run?)
- https://www.youtube.com/watch?v=jh0fPT-AWwM





To check
- what if the code to remove responses with broken bytes is blocking info?



Debugging
Eventauly figured out from series of files...
https://chopcoding.com/flask-docker-vscode-how-to-simplify-debugging-and-improve-your-development-experience
https://medium.com/@lassebenninga/how-to-debug-flask-running-in-docker-compose-in-vs-code-ef37f0f516ee
https://stackoverflow.com/questions/48717646/docker-compose-down-with-a-non-default-yml-file-name
https://stackoverflow.com/questions/57528077/docker-compose-with-name-other-than-dockerfile


No debugging
Build the image with the default compose file
    $ docker compose build
Create container from image created with default compose file
    $ docker compose up -d
    $ docker exec -it findmy_server bash -c "cd /app && python setup.py"

Debuging
Build the image with the debug compose file
    $ docker compose -f docker-compose.debug.yml build
Create container from debug image
    $ docker compose -f docker-compose.debug.yml up -d
    $ docker exec -it findmy_server bash -c "cd /app && python setup.py"

    Attach debugger from VSCode
    Add breakpoints and call endpoint